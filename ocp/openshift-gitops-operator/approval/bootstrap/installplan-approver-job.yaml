---
apiVersion: batch/v1
kind: Job
metadata:
  name: installplan-approver
  namespace: openshift-gitops-operator
  annotations:
    # This is a one-time bootstrap job, not managed by GitOps
    # Manually delete after verification: oc delete job installplan-approver -n openshift-gitops-operator
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    argocd.argoproj.io/sync-options: Prune=false
spec:
  # DO NOT set ttlSecondsAfterFinished - would cause ArgoCD to recreate endlessly
  # Keep job around for debugging, delete manually when done
  template:
    metadata:
      labels:
        app: installplan-approver
    spec:
      serviceAccountName: installplan-approver
      restartPolicy: OnFailure
      containers:
        - name: approver
          image: registry.redhat.io/openshift4/ose-cli:latest
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Starting InstallPlan approver..."
              
              # Wait for subscription to create installplan
              echo "Waiting for InstallPlan to be created..."
              sleep 10
              
              # Loop to check and approve pending installplans
              MAX_ATTEMPTS=30
              ATTEMPT=0
              
              while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
                echo "Checking for pending InstallPlans (attempt $((ATTEMPT+1))/$MAX_ATTEMPTS)..."
                
                # Get all pending install plans for our subscription
                PENDING_IPS=$(oc get installplan -n openshift-gitops-operator \
                  -o jsonpath='{range .items[?(@.spec.approved==false)]}{.metadata.name}{"\n"}{end}')
                
                if [ -n "$PENDING_IPS" ]; then
                  echo "Found pending InstallPlans:"
                  echo "$PENDING_IPS"
                  
                  for IP in $PENDING_IPS; do
                    echo "Approving InstallPlan: $IP"
                    oc patch installplan "$IP" -n openshift-gitops-operator \
                      --type merge \
                      --patch '{"spec":{"approved":true}}'
                    
                    if [ $? -eq 0 ]; then
                      echo "Successfully approved InstallPlan: $IP"
                      exit 0
                    else
                      echo "Failed to approve InstallPlan: $IP"
                    fi
                  done
                else
                  echo "No pending InstallPlans found yet..."
                fi
                
                ATTEMPT=$((ATTEMPT+1))
                sleep 10
              done
              
              echo "Timeout: No InstallPlan found after $MAX_ATTEMPTS attempts"
              exit 1

